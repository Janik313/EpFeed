// HowTo get the correct coordinates in leaflet with CRS.Simple
//
// the default tile size (256 px) and max zoom define the max available pixel/image size
// zoom 0 = 256
// zoom 1 = 512
// zoom 2 = 1024
// zoom 3 = 2048
// zoom 4 = 4096
// zoom 5 = 8192
//
// In CRS.Simple mode lat-lng coordinates are map-unit values like a grid
// but the value for y is negative because Leaflet still uses lat-lng internally!
// Workaround:
// use map.unproject() to convert from pixel coordinates to lat-lng coordinates.
// or map.project() to convert from lat-lng to pixel
//
// L.Control.MousePosition.js
// is overridden to display the correct mouse position
// in CRS.Simple mode relative to the max zoom
// new options are:
// maxZoom: 1
// crsSimple: false
//

/*jshint strict:false */

var tileSize            = 256;     // default 256
var mapMinZoom          = 2;
var mapMaxZoom          = 5;
var zoom                = 2;
var lat                 = 5200;
var lng                 = 4200;
var center;
var maxImgSize          = tileSize * Math.pow(2, mapMaxZoom);
var maxImgSizeCenter    = maxImgSize / 2;
var map;
var mapHeight           = 7480;
var mapBounds;

var debug               = false;
var debugMarkers        = new L.FeatureGroup();

// Store query string value into urlParams
var urlParams;
(window.onpopstate = function () {
  var match,
      pl     = /\+/g,  // Regex for replacing addition symbol with a space
      search = /([^&=]+)=?([^&]*)/g,
      decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); },
      query  = window.location.search.substring(1);

  urlParams = {};
  while (match = search.exec(query)){
    urlParams[decode(match[1])] = decode(match[2]);
  }
})();

// Get urlParams map options
zoom                    = (urlParams['zoom'] !== undefined && urlParams['zoom'] >= mapMinZoom && urlParams['zoom'] <= mapMaxZoom ) ? urlParams['zoom'] : zoom;
lat                     = urlParams['lat'] !== undefined ? urlParams['lat'] : lat;
lng                     = urlParams['lng'] !== undefined ? urlParams['lng'] : lng;
debug                   = urlParams['debug'] !== undefined ? urlParams['debug'] : debug;
var poiFilter            = urlParams['location_id'] !== undefined && urlParams['location_id'] !== '' ? urlParams['location_id'] : null;
var regionFilter        = urlParams['region_id'] !== undefined ? urlParams['region_id'] : null;

var languageCode      = urlParams['lang'] !== undefined ? urlParams['lang'] : "de";
var langIsos= "/de/en/fr/nl/it/";
var langPathPart= document.location.pathname.substring(0,4);
if ((langPathPart.length == 4) && (langIsos.search(langPathPart) != -1 )) {
  languageCode= langPathPart.substring(1,3);
}

//Global variables
var poiListRequestUrl    = "/"+languageCode+"/data/parkplan/locations/json";
var poiDetailRequestUrl  = "/"+languageCode+"/parkplan-poi-detail/";
var poiList              = Array();
var poiListLoaded        = false;
var markers;

var regionListRequestUrl = "/"+languageCode+"/data/parkplan/regions/json";
var regionList           = Array();
var regionListLoaded     = false;
var regionMarkers;

var currentPopup		      = null;
var fnResetLocation       = false;

var defaultIcon = L.icon({
  iconUrl: '/profiles/europapark/modules/custom/europapark_parkplan/parkplan/images/marker-icon-blanko.svg',
  iconSize: [40, 50],
  iconAnchor: [20, 50],
  popupAnchor: [0, -50]
});

function init() {
  initMap();
  initPois();
  initRegion();

  // if all map items are loaded enable map functionalities
  finalSteps();

  // Handler search function
  handlerAutoSuggest();

  // Print Handler
  //handlerPrint();
}
function initMap(){
  map = L.map('map', {
    maxZoom: mapMaxZoom,
    minZoom: mapMinZoom,
    crs: L.CRS.Simple
  });

  // set initial view;
  map.setView([lat, lat], mapMinZoom);

  // set default center
  center = map.unproject([lat, lng], mapMaxZoom);

  // disable/hide drag/zoom functionality
  map.dragging.disable();
  map.touchZoom.disable();
  map.doubleClickZoom.disable();
  map.scrollWheelZoom.disable();
  $(".leaflet-control-container").hide();

  mapBounds = new L.LatLngBounds(
    map.unproject([0, 0], mapMaxZoom),
    map.unproject([maxImgSize, mapHeight], mapMaxZoom)
  );
  //map.fitBounds(mapBounds);
  map.setMaxBounds(mapBounds);

  // Add tile layer
  L.tileLayer('/profiles/europapark/modules/custom/europapark_parkplan/parkplan/map/{z}/{x}/{y}.png', {
    minZoom: mapMinZoom,
    maxZoom: mapMaxZoom,
    continuousWorld : true,
    bounds: mapBounds,
    noWrap: true,
    tms: false,
    tileSize: tileSize
  }).addTo(map);

  //Display lat,lng of current mouse position.
  if (debug) {
    L.control.mousePosition({
      numDigits: 0,
      crsSimple: true,
      maxZoom: mapMaxZoom
    }).addTo(map);
  }

  map.on('popupopen', function(e) {
    //map.setMaxBounds(null);
  });

  map.on('popupclose', function(e) {
    //map.setMaxBounds(mapBounds);
  });

  map.on('zoomend', function(e){
    //console.log('zoomend');

    // close all popup when zoom in/out is finished
    if ( currentPopup !== null ){
      //currentPopup._close();
    }

    // zoom out to first level
    if (e.target._animateToZoom === mapMinZoom) {
      //map.dragging.disable();

      // disable pan control
      //$(".leaflet-control-pan").fadeOut();
      //$(".leaflet-control-pan").addClass("disable-bg");
    }
    // zoom in
    else {
      //map.dragging.enable();

      // enable pan control
      //$(".leaflet-control-pan").fadeIn();
      //$(".leaflet-control-pan").removeClass("disable-bg");
    }
  });


  // zoom out when double click
  $(document).contextmenu( makeDoubleRightClickHandler( function(e) {
    map.zoomOut();
  }));


  if (debug) {
    //var markerZero = L.marker(map.unproject([0,0], mapMaxZoom), {icon: defaultIcon}).addTo(map).bindPopup('zero');
    //var markerMax = L.marker(map.unproject([maxImgSize,mapHeight], mapMaxZoom), {icon: defaultIcon}).addTo(map).bindPopup('max');
    //var markerCenter = L.marker(map.unproject([maxImgSizeCenter, maxImgSizeCenter], mapMaxZoom), {icon: defaultIcon}).addTo(map).bindPopup('center');

    map.on('contextmenu', function(e){
      // remove all markers
      debugMarkers.clearLayers();

      var latlng = L.latLng(e.latlng);
      var position = map.project(latlng, mapMaxZoom);

      var m = L.marker(latlng, {icon: defaultIcon}).bindPopup(position.x +':'+ position.y);
      debugMarkers.addLayer(m);
      //var m = L.marker(latlng, {icon: myIcon}).addTo(map).bindPopup(position.x +':'+ position.y);

      showResetBtn();
    });

    // add markers group to map
    map.addLayer(debugMarkers);
  }
}
function initPois(){
  var attractionIcon = L.icon({
    iconUrl: '/profiles/europapark/modules/custom/europapark_parkplan/parkplan/images/marker-icon-attraction.svg',
    iconSize: [40, 50],
    iconAnchor: [20, 50],
    popupAnchor: [0, -50]
  });
  var hotelIcon = L.icon({
    iconUrl: '/profiles/europapark/modules/custom/europapark_parkplan/parkplan/images/marker-icon-hotel.svg',
    iconSize: [40, 50],
    iconAnchor: [20, 50],
    popupAnchor: [0, -50]
  });
  var restaurantIcon = L.icon({
    iconUrl: '/profiles/europapark/modules/custom/europapark_parkplan/parkplan/images/marker-icon-gastro.svg',
    iconSize: [40, 50],
    iconAnchor: [20, 50],
    popupAnchor: [0, -50]
  });
  var infoIcon = L.icon({
    iconUrl: '/profiles/europapark/modules/custom/europapark_parkplan/parkplan/images/marker-icon-info.svg',
    iconSize: [40, 50],
    iconAnchor: [20, 50],
    popupAnchor: [0, -50]
  });

  // Marker-Group
  markers = new L.MarkerClusterGroup({
    zoomToBoundsOnClick: false,
    showCoverageOnHover: false
  });
  //markers = new L.FeatureGroup();

  $.getJSON(poiListRequestUrl, function (data) {
    for (var i = 0; i < data.locations.length; i++) {
      try {
        var poiRecord = data.locations[i].location;
        var icon = defaultIcon;
        switch (poiRecord.location_type) {

          case 'accommodation':
            icon = hotelIcon;
            break;

          case 'attraction':
            icon = attractionIcon;
            break;

          case 'restaurant':
            icon = restaurantIcon;
            break;

          case 'service_point':
            icon = infoIcon;
            break;

        }

        if ((poiRecord.location_type != 'event' && poiRecord.location_type != 'show') || poiRecord.location_id == poiFilter) {

          var m = new L.Marker(map.unproject([poiRecord.location_x, poiRecord.location_y], mapMaxZoom), {icon: icon});
          m.id = poiRecord.location_id;
          m.title = poiRecord.headline;

          // add marker to markers group
          markers.addLayer(m);

          // store poi detail info into global variable
          poiList.push({"poi": poiRecord, "marker": m});

        }

      }
      catch (e) {
        continue;
      }
    }

    // add markers group to map
    map.addLayer(markers);

    markers.on('clusterclick', function (a) {
      if(debug) console.log('clusterclick markers');

      //close popup when 2nd  click on the marker
      if (currentPopup != null && currentPopup._latlng == a.latlng && currentPopup._isOpen) {
        currentPopup._close();
        return false;
      }

      var coord = a.latlng;
      this.latlng = a.latlng;
      var childmarkers = a.layer.getAllChildMarkers();
      var ids = '';
      var idsArr = new Array();

      for (var i = 0; i < childmarkers.length; i++) {
        var markerid = childmarkers[i].id;
        idsArr.push(markerid);

        // Build id parameter for requestURL to get the view
        // Sorting here is not needed
        if (i == childmarkers.length - 1) {
          ids += markerid;
        }
        else {
          ids += markerid + '+';
        }
      }

      // Sort markers id because the view result is sorted by node id too!!!
      idsArr.sort(function (a, b) {
        return a - b;
      });

      //console.log("ids");
      //console.log(ids);
      //console.log("idsArr");
      //console.log(idsArr);

      var requestUrl = poiDetailRequestUrl + ids;
      var obj = this;
      $.get(requestUrl, function (response) {
        var responseparse = jQuery.parseHTML(response);
        $(responseparse).find('.views-row').each(function (indx) {
          //console.log('------ each ---');
          //console.log($(this));
          //console.log($(this).find(".views-field-title a").text());

          var poiDetail = getPoiById(idsArr[indx]);
          //console.log(poiDetail.poi);

          // Poi Link
          var poiLink = $(this).find(".views-field-title a");
          if ($(poiLink).length > 0) {
            if (poiDetail.poi.location_type == 'service_point' || poiDetail.poi.location_type == 'shop') {
              // remove link in title
              $(this).find(".views-field-title span").text(poiLink.text());
            }
            else {
              // add read-more-link button
              $(poiLink).attr("target", "_parent");
              var link = $(poiLink).attr("href");
              $(this).append("<a class='views-field-poilink' target='_parent' href='" + link + "'></a>");
            }
          }
        });

        $(responseparse).find('.views-row').append('<div class="clear poidetail-border"></div>');

        var hover_bubble = new L.Rrose({offset: new L.Point(0, -40), closeButton: false, autoPan: true})
          .setContent($(responseparse).html())
          .setLatLng(coord)
          .openOn(map);
        currentPopup = hover_bubble;
        //obj.bindPopup($(responseparse).html()).openPopup();
      });
    });

    markers.on('click', function (a) {
      if(debug) console.log('click markers');

      //close popup when 2nd  click on the marker
      if (currentPopup != null && currentPopup._latlng == a.latlng && currentPopup._isOpen) {
        currentPopup._close();
        return false;
      }

      var coord = a.latlng;
      this.latlng = a.latlng;
      var obj = this;
      var requestUrl = poiDetailRequestUrl + a.layer.id;

      //request detail poi
      $.get(requestUrl, function (response) {
        var responseparse = jQuery.parseHTML(response);
        var poiDetail = getPoiById(a.layer.id);

        // Poi Link
        var poiLink = $(responseparse).find(".views-field-title a");
        if ($(poiLink).length > 0) {
          if (poiDetail.poi.location_type == 'service_point' || poiDetail.poi.location_type == 'shop') {
            // remove link in title
            $(responseparse).find(".views-field-title span").text(poiLink.text());
          }
          else {
            // add read-more-link button
            $(poiLink).attr("target", "_parent");
            var link = $(poiLink).attr("href");
            $(responseparse).find('.views-row').append("<a class='views-field-poilink' target='_parent' href='" + link + "'></a>");
          }
        }

        $(responseparse).find('.views-row').append('<div class="clear"></div>');

        map.setView(coord);

        var hover_bubble = new L.Rrose({offset: new L.Point(0, -40), closeButton: false, autoPan: true})
          .setContent($(responseparse).html())
          .setLatLng(coord)
          .openOn(map);
        currentPopup = hover_bubble;
      });
    });

    // load poi types into location select
    fetchPoiCombobox();

    poiListLoaded = true;
    if(debug) console.log('poiListLoaded = true');
  });
}
function initRegion(){
  regionMarkers = new L.FeatureGroup();

  $.getJSON(regionListRequestUrl, function (data) {
    for (var i = 0; i < data.regions.length; i++) {
      try {
        var region = data.regions[i].region;

        if (region.location_x != "" && region.location_y != "") {

          // store region detail info into global variable
          //regionList.push(region);
          regionList[region.region_id] = region;

          var myIcon = L.divIcon({
            className: 'region-icon',
            html: region.name
          });

          var m = new L.Marker(map.unproject([region.location_x, region.location_y], mapMaxZoom), {icon: myIcon});
          m.id = region.region_id;
          m.title = region.name;

          regionMarkers.addLayer(m);
        }
      }
      catch (e) {
        continue;
      }
    }

    // add markers group to map
    map.addLayer(regionMarkers);

    regionListLoaded = true;
    if(debug) console.log('regionListLoaded = true');
  });
}
function finalSteps(){
  // ceck if all ajax/json calls are done and content is ready
  if ( poiListLoaded && regionListLoaded ) {
    if (debug) {console.log('all map items loaded');}

    // enable map filtering
    handlerPoiFiltering();
    handlerRegionFiltering();

    // enable drag and zoom handlers
    map.dragging.enable();
    map.touchZoom.enable();
    map.doubleClickZoom.enable();
    map.scrollWheelZoom.enable();
    $(".leaflet-control-container").show();

    // remove loading screen
    $('body').removeClass('loadingmap');

    // zoom/center the map
    map.setView(center, zoom);
  }
  else {
    setTimeout(finalSteps,250);
  }
}

// Subfunctions
function clearMap() {
  if (debug) console.log('clearMap()');

  // close all popup
  if ( currentPopup != null ){
    currentPopup._close();
  }

  markers.clearLayers();
  debugMarkers.clearLayers();
}
function resetMap() {
  clearMap();
  if (debug) console.log('resetMap()');

  zoom = mapMinZoom;
  map.setView(center, zoom);

  // add all POI-Marker to map
  $(poiList).each(function () {
    markers.addLayer(this.marker);
  });

  // reset filter
  resetFilter();
}

function showResetBtn() {
  $('.reset-filter a').removeClass('hide');
  $('.reset-filter .inactive-btn').addClass('hide');
}
function hideResetBtn() {
  $('.reset-filter a').addClass('hide');
  $('.reset-filter .inactive-btn').removeClass('hide');
}
function resetSearch(){
  $("#searchfield").val("");
  $(".autosuggestbox").hide();
}
function resetLocation(){
  fnResetLocation = true;
  $('#cbblocation').scombobox('val','0');
}
function resetFilter(){
  if (debug) console.log('resetFilter()');

  resetLocation();
  resetSearch();
  hideResetBtn();
}

function makeDoubleRightClickHandler( handler ) {
  var timeout = 0, clicked = false;
  return function(e) {

    e.preventDefault();

    if( clicked ) {
      clearTimeout(timeout);
      clicked = false;
      return handler.apply( this, arguments );
    }
    else {
      clicked = true;
      timeout = setTimeout( function() {
        clicked = false;
      }, 300 );
    }
  };
}

function getPoiById(id) {
  for (var i = 0 ; i < poiList.length; i ++)
  {
    if (poiList[i].poi.location_id == id)
      return poiList[i];
  }
  return null;
}

function gotoCategory(id){
  if (debug) console.log('gotoCategory()');
  // fire manual change of location
  $("#cbblocation").scombobox('val', id);
}
function gotoPoi(poiId, searchString) {
  if(debug) console.log('gotoPoi()');

  var poi = getPoiById(poiId);
  if (poi != null) {
    clearMap();
    resetFilter();

    searchString || (searchString = '');
    $("#searchfield").val(searchString);

    // add searched marker
    markers.addLayer(poi.marker);

    map.setView([poi.marker._latlng.lat, poi.marker._latlng.lng], 4);

    showResetBtn();
  }
}
function gotoRegion(id, searchString){
  if (debug) console.log('gotoRegion()');
  clearMap();
  resetFilter();

  if (id != 0) {
    var region = regionList[id];
    if (debug) console.log('display markers for: ' + region.name);

    searchString || (searchString = '');
    $("#searchfield").val(searchString);

    // display pois in this area
    $(poiList).each(function () {
      if (this.poi.park_region_id == id) {
        markers.addLayer(this.marker);
      }
    });

    showResetBtn();

    // change center and zoom for marker
    var latLng = map.unproject([region.location_x, region.location_y], mapMaxZoom);
    map.setView([latLng.lat, latLng.lng], 4);
  }
}

function fetchPoiCombobox(){
  var localtionTypes = new Array();

  $(poiList).each(function () {
    if (this.poi.location_type != 'event' && this.poi.location_type != 'show') {
      var isExist = false;
      for (var i = 0; i < localtionTypes.length; i++) {
        if (localtionTypes[i].type == this.poi.location_type) {
          localtionTypes[i].poicount += 1;
          isExist = true;
          break;
        }
      }
      if (!isExist) {
        localtionTypes.push({"type": this.poi.location_type, "name": this.poi.location_type_name, "poicount": 1});
      }
    }
  });

  $(localtionTypes).each(function () {
    $("#cbblocation").append("<option value='" + this.type + "' >" + this.name + " (" + this.poicount + ")</option>");
  });

  $('#cbblocation').scombobox();
  $('#cbblocation').scombobox('val', '0');
  $("#cbblocation input.scombobox-display").keydown(function (e) {
    e.preventDefault();
    return false;
  });
}

function handlerPoiFiltering(){
  // filter from url parameter
  if ( poiFilter != null ) {
    if (debug) console.log('url parameter: location_id: ' + poiFilter);

    var poiArray = poiFilter.split(',');
    if (debug) console.log(poiArray);

    if(poiArray.length == 1){
      var poi = getPoiById(poiArray[0]);

      if (poi != null) {
        clearMap();
        markers.addLayer(poi.marker);
        showResetBtn();

        // change center and zoom for marker
        center = [poi.marker._latlng.lat, poi.marker._latlng.lng];
        zoom = 4;
      }
    }
    else {
      clearMap();

      for (var i = 0; i < poiArray.length; i++) {
        try {
          var poi = getPoiById(poiArray[i]);
          if (poi != null) {
            markers.addLayer(poi.marker);
          }
        }
        catch (e) {
          continue;
        }
      }

      showResetBtn();
    }
  }

  // if location select change
  $('#cbblocation select').change(function(e){
    var type = $('#cbblocation select option:selected').val();

    if (type != 0) {
      if (debug) console.log('location select: ' + type);
      clearMap();

      // reset other filters
      resetSearch();

      // add all markers of type
      if (debug) console.log('add all markers of type: ' + type);
      $(poiList).each(function () {
        if (this.poi.location_type == type) {
          markers.addLayer(this.marker);
        }
      });

      showResetBtn();

      // zoom to default
      map.setView(center, mapMinZoom);
    }
    else {
      // check if change to 0 comes from reset function
      if (fnResetLocation) {
        fnResetLocation = false;
      }
      else {
        if (debug) console.log('location select: ' + type);
        resetMap();
      }
    }
  });
}
function handlerRegionFiltering(){
  // filter from url parameter
  if (regionFilter != null && regionFilter != 0) {
    if (debug) console.log('url parameter: region_id');
    clearMap();

    var region = regionList[regionFilter];

    // display pois in this area
    if (debug) console.log('display markers for: ' + region.name);
    $(poiList).each(function(){
      if( this.poi.park_region_id == regionFilter ) {
        markers.addLayer(this.marker);
      }
    });

    showResetBtn();

    // change center and zoom for marker
    var latLng = map.unproject([region.location_x, region.location_y], mapMaxZoom);
    center = [latLng.lat, latLng.lng];
    zoom = 3;
  }

  // on click filter
  regionMarkers.on('click', function (e) {
    if (debug) console.log('click regionMarkers');
    clearMap();
    resetFilter();

    var regionlayer = e.layer;

    if (regionlayer.id != 0) {
      if (debug) console.log('display markers for: ' + regionlayer.title);

      // display pois in this area
      $(poiList).each(function () {
        if (this.poi.park_region_id == regionlayer.id) {
          markers.addLayer(this.marker);
        }
      });

      showResetBtn();

      // zoom to region
      map.setView([e.latlng.lat, e.latlng.lng], 4);
    }
  });
}

// Search
function handlerAutoSuggest() {
  $("#searchfield").keyup(function (e) {
    var searchString = $(this).val();

    if (searchString.length >= 3) {
      displaySuggestBox(searchString);
    }
    else {
      $(".autosuggestbox").hide();
    }
  });

  /*$("#searchfield").bind("clickoutside", function () {
    var searchString = $(this).val();
  });*/

  $("#searchfield").click(function (e) {
    var searchString = $(this).val();
    if (searchString.length >= 3) {
      displaySuggestBox(searchString);
    }
  });

  $(".autosuggestbox").bind('clickoutside', function (e) {
    e.stopPropagation();
    if (e.target.id == "searchfield")
      return;
    $(this).hide();
  });
}
function displaySuggestBox(searchString) {
  var themesResult        = searchThemes(searchString);
  var poiCategoriesResult = searchPoiCategories(searchString);
  var poisResult          = searchPois(searchString);
  var html                = "";

  if(debug) console.log('displaySuggestBox: ' + searchString);

  // display searchbox
  if (themesResult.length == 0 && poiCategoriesResult.length == 0 && poisResult.length == 0) {
    var text = tSearchSystemNotFound.replace("{0}", searchString);
    html += "<div class='searchresult-noitem-wraper'><p class='searchresult-noitem'>0 " + tSearchResult + "</p><p class='searchresult-noitem'>" + text + "</p></div>";
  }
  else {
    if (themesResult.length > 0) {
      //html += "<div class='searchresult-header'>"+tCountries+"</div>";
      $(themesResult).each(function () {
        html += '<div class="searchresult-item searchresult-theme-item" onclick="gotoRegion(' + this.region_id + ', \'' + searchString + '\')">' + getHighlightText(this.name, searchString) + '</div>';
      });
    }
    if (poiCategoriesResult.length > 0) {
      //html += "<div class='searchresult-header'>"+tLocations+"</div>";
      $(poiCategoriesResult).each(function () {
        html += "<div class='searchresult-item searchresult-category-item' onclick='gotoCategory(\"" + this.type + "\")'>" + getHighlightText(this.name, searchString) + "</div>";
      });
    }
    if (poisResult.length > 0) {
      //html += "<div class='searchresult-header'>"+tLocation+"</div>";
      $(poisResult).each(function () {
        html += '<div class="searchresult-item searchresult-poi-item" onclick="gotoPoi(' + this.poi.location_id + ', \'' + searchString + '\')">' + getHighlightText(this.poi.headline, searchString) + '</div>';
      });
    }
  }

  $(".autosuggestbox").html("").append(html);
  $(".autosuggestbox").show();
}
function getHighlightText(text,searchString){
  var regEx       = new RegExp(searchString, "gi");
  var replaceMask = "<span class='search-highlight'>"+searchString+"</span>";

  return text.replace(regEx, replaceMask);
}
function searchPoiCategories(searchString){
  var results = new Array();
  $(poiList).each(function(){
    if(this.poi.location_type_name.toLowerCase().indexOf(searchString.toLowerCase()) != -1)
    {
      var item    = {"name" : this.poi.location_type_name, "type" : this.poi.location_type};
      var isExist = false;
      for (var i = 0; i < results.length; i ++)
      {
        if (results[i].name == item.name)
        {
          isExist = true;
          break;
        }

      }
      if (!isExist)
      {
        results.push(item);
      }
    }

  });
  return results;
}
function searchPois(searchString){
  var results = new Array();
  $(poiList).each(function(){
    if(this.poi.headline.toLowerCase().indexOf(searchString.toLowerCase()) != -1)
      results.push(this);
  });
  return results;
}
function searchThemes(searchString){
  var results = new Array();
  $(regionList).each(function(){
    if(this.name.toLowerCase().indexOf(searchString.toLowerCase()) != -1)
      results.push(this);
  });
  return results;
}

//Print
function handlerPrint() {
  $(".iconfax a").click(function (e) {
    e.preventDefault();
    var printUrl = "?print&";

    // Location Filter
    if ($("#cbblocation select option:selected").val() != 0) {
      printUrl += "poiCatId=" + $("#cbblocation select option:selected").val();
    }
    else {
      var poiPrintList = 0;
      var layers = markers.getLayers();

      $(layers).each(function () {
        var layer = $(this);
        poiPrintList += ',' + layer[0].id;
      });
      if(debug){ console.log('poiPrintList: ' + poiPrintList); }

      printUrl += "location_id=" + poiPrintList;
    }

    window.open(printUrl, '_blank');
  });
}


//*******Start up***************************
jQuery(function(){
  setTimeout(init,1000);
});
